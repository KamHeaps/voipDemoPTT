
function test(){
    
    
    
    function log(message){
        console.log("---------- nuf_messageing test.js test()----------\n"+message);
    }
    function messageing_onMessage(event){
        var
            messageObject = event.data.messageObject, 
            client = clientManager.getClient(event.data.urlClientId),
            clientDest
        ;
        log(
            "messageing received onMesssage, event:\n"+ event
        );
        if(messageObject.dest == "server"){
            log("message object dest is server.");
            if(client){ // if clientid is valid
                client.on.dispatchEvent(
                    "message", {
                        messageObject:event.data.messageObject,
                        reqObject:event.data.reqObject
                    }
                );
            }
        }else if(  (clientDest= clientManager.getClient(messageObject.dest)) ){
            log(
                "message object dest is client:"+clientDest.id+"\n"+
                "relaying message from:"+client.id + " to "+clientDest.id
            );
            clientDest.send(messageObject);
            event.data.reqObject.sendSuccessfulResponse();
        }
        
    }
    function onNewClient(event){
        function client_onConnected(event){
            log("client "+client.id+" received onConnected, event:\n"+event);
        }
        function client_onMessage(event){
            var
                reqObject = event.data.reqObject
            ;
            log(
                "client "+client.id+" received message, event :\n"+event+"\n"+
                "messageObject:"+JSON.stringify(event.data.messageObject,undefined, "\t")
            );
            responseMessageObject = new client.send.MessageObject(
                "responseMessage",
                client.id,
                "server",
                {
                    str:"this is a server response to close the reqObject and acknowlege the messageObject with id"+ event.data.messageObject.data.id 
                }
            );
            // responseMessageObject is optional, a generic messageObject will be created if this is omitted
            reqObject.sendSuccessfulResponse(responseMessageObject);
            // however a reqObject.sendSuccessfulResponse or reqObject.sendFailedResponse must be called to
            // close off the request object
            responseMessageObject = new client.send.MessageObject(
                "responseMessage",
                client.id,
                "server",
                {
                    str:"this is a server response to the messageObject with id:"+event.data.messageObject.data.id
                }
            );
            responseMessageObject.flags.responseData = event.data.messageObject.flags.responseData;
            log("sending response through client send");    
            client.send(responseMessageObject);
            if(Object.keys(clientManager.clients).length >= 2){
                initiateClientToClientMessageing(client);
            }
        }
        function client_onClosed(event){
            log("client "+client.id+" closed, event:\n"+event);
        }
        function clientInitialize(){
            log("client "+client.id+" clientInitialize");
            Object.defineProperty(
                client,
                "extraData",
                {
                    get:function(){return {"str":"this is data that can be added form deep within your node stack"}; }
                }
            );
        }
        var
            data = event.data,
            client = data.client
        ;
        log("client manager onNewClient called, event:\n"+event);
        client.initialize = clientInitialize;
        client.onConnected = client_onConnected;
        client.onMessage = client_onMessage;
        client.onClosed = client_onClosed;
    }
    function initiateClientToClientMessageing(client){
        var
            clientKeys = Object.keys(clientManager.clients),
            client0 = client,
            client1 = clientManager.getClient(clientKeys[0]),
            messageObject
        ;
        if(client0 == client1){
            client1 = clientManager.getClient(clientKeys[1]);
        }
        
        log(
            "in initiateClientToClientMessageing,\n"+
            "client0:"+client0+"\n"+
            "client1:"+client1+"\n"
        );
        messageObject = new Messageing.MessageObject(
            "initiateClientToClientMessageing",
            client0.id,
            "server",
            {
                callClient:client1.id
            }
        );
        client0.send(messageObject);
    }

    log("in test");
    // server testing
    // hack  path file name
    var
        port = 50552,
        path = require("path"),
		Messageing = require(path.resolve("./nuf_messageing/lib/messageing.js") ),// require("nuf_messageing"),
		url = "sseMessageing",
			//	url that listens for client
			//	used with node express app
			//	adds three urls
			//	1.
			//		postUrl = url + "/post/:clientId?" 
			//		which listens to post messages from client with valid clientId
            //  2.
		    //      sseUrl = url +"/sseClientConnect/:clientId?"
			// 		which listens for a sse copnnection from a client with a valid id
			// 
			//	3.  messageingClientUrl = url + "/messageingClient.js"
			// 		which servers the messageingClient.js javaScrip locates at ./src/messageingClient.js
		express = require("express"),
		app = express(),
		messageing = new Messageing(app,url), //
		clientManager = messageing.clientManager,
        server = require('http').createServer()
    ;
    
    // add on new client
    messageing.onMessage = messageing_onMessage;
    clientManager.onNewClient = onNewClient;
    
    app.set( "view engine", "ejs");
    app.set( "views", ["./nuf_messageing/tests"]);
    app.get(
        "/", 
        function(req, res){
            var client = clientManager.getNewClient();
            client.initialize();
            log(
                "client:"+client.id+" requested a page \n"+
                "it has been initialized and has extra data:\n"+
                JSON.stringify(client.extraData, undefined, "\t")
            );
            res.render(
                "testClient",
                {
                    messageingObject:{  // messageingObject needed for messageingClient.js to connect
                        clientId:client.id,
                        messageingUrl:url
                    }
                }
            );
        }
    );
    server.on('request', app);
    server.listen(port, function () { log('Listening on ' + server.address().port); });
}

module.exports = test;
