

// clientId
// messageingUrl

// requires clientEventHandlerCollection.js.js
var messageing = (function(){
    function generateId(){
        var alpha = "abcdefghjklmnpqrstuvwxyzABCDEFGJKLMNPQRSTUVWXYZ1234567890";
        var result = "";
        for(var i=0; i < 47; i++){
            result += alpha[Math.floor(alpha.length * Math.random()) ];
        }
        return result;
    }
    function log(message){
        console.log(
            "--------------  messagingClient.js --------------\n"+
            message+"\n"+
            "--------------------------------------------------"
        );
    }
    var responseHandler = (function(){
        function ResponseHandler(){
            function addResponse(messageObject, response){
                var
                    responseId = generateId()
                ;
                messageObject.flags.responseData = messageObject.flags.responseData || {};
                while(messageObject.flags.responseData[responseId] || responseFunctions[responseId]){
                    responseId = generateId();
                }
                messageObject.flags.responseData[clientId] = responseId;
                responseFunctions[responseId] = response;
            }
            function getResponse(messageObject){
                var
                    result 
                ;
                if(messageObject.flags.responseData && messageObject.flags.responseData[clientId]){
                    result = responseFunctions[messageObject.flags.responseData[clientId]];
                }
                return result;
            }
            
            function init(){
                clientId = messageingObject.clientId;
                _this.addResponse = addResponse;
                _this.getResponse = getResponse;
                responseFunctions = {};
            }
            var
                _this = this,
                clientId,
                responseFunctions
            ;
            init();
        }
        return new ResponseHandler();
    })();
    var MessageObject = (function(){
        function MessageObject(type, dest, source, data, flags){
            function toString(){
                var result =
                    "{\n"+
                    "   type  :"+_this.type+",\n"+
                    "   dest  :"+_this.dest+",\n"+
                    "   source:"+_this.source+",\n"+
                    "   data  :"+JSON.stringify(_this.data, undefined, "\t\t")+",\n"+
                    "   flags :"+JSON.stringify(_this.flags, undefined, "\t\t")+
                    "}";
                return result;
            }
            function init(){
                _this.type = type;
                _this.dest = dest;
                _this.source = source;
                _this.data = data;
                _this.flags = flags || {};
                _this.toString = toString;
            }
            var
                _this = this
            ;
            init();
        }
        MessageObject.fromString = function (str){
            var json = JSON.parse(str);
            return new MessageObject(json.type, json.dest, json.source, json.data, json.flags);
        };
        MessageObject.getTransferString = function(messageObject){
            var
                data = messageObject.data,
                headerString,
                dataString = JSON.stringify(data)
            ;
            delete messageObject.data;
            headerString = JSON.stringify(messageObject);
            messageObject.data = data;
            return headerString+"\n"+ dataString;
        };
        MessageObject.fromTransferString = function(string){
            var
                index = string.indexOf("\n"),
                result = MessageObject.fromString( string.substring(0,index) )
            ;
            result.data = JSON.parse(string.substring(index+1));
            return result;
        };
        return MessageObject;
    })();
    function post(url, messageObject, sentCallback){
        var
            httpRequest = new XMLHttpRequest(),
            message = MessageObject.getTransferString(messageObject),
            responseObject
        ;
        
        httpRequest.open("POST", url, true);
        httpRequest.responseType = 'text';
        httpRequest.onreadystatechange = function() {
            if (httpRequest.readyState == 4 && sentCallback){
                try{
                    responseObject = MessageObject.fromTransferString(httpRequest.responseText);
                }catch(exception){
                    log(
                        "Error: Failed to parse post response text:\n"+httpRequest.responseText+"\nexception:"+exception
                    );
                }
                if(responseObject){
                    sentCallback( responseObject);
                }else{
                    sentCallback( httpRequest.responseText);
                }
            }
        };
        httpRequest.send(message, responseHandler);
    }
    function Messageing(){
        function sseConnect(){
            function onSSEMessage(event){
                var
                    messageString = JSON.parse(event.data), // parse string as string to handel "/n" in servers respone
                    messageObject 
                ;
                log("received onSSEMessage:\n"+messageString);
                try{
                    messageObject = MessageObject.fromTransferString(messageString);
                }finally {
                    if(messageObject){
                        onMessage(messageObject);
                    }else{
                        if(_this.onTextMessage){
                            _this.onTextMessage(messageString);
                        }
                    }
                }
            }
            var sourceUrl = messageingObject.messageingUrl + "/sseClientConnect/"+_this.clientId;
            source = new EventSource(sourceUrl);
            source.addEventListener("message", onSSEMessage, false);
        }
        function getMessageObject(type, dest, data){
            return new MessageObject(type, dest, _this.clientId, data);
        }
        function send(messageObject, responseCallback, sentCallback){
            if(responseCallback){
                responseHandler.addResponse(messageObject, responseCallback);
            }
            post(postUrl, messageObject, sentCallback);
        }
        function onMessage(messageObject){
            var
                responseFunction
            ;
            if( (responseFunction = responseHandler.getResponse(messageObject)) ){
                responseFunction(messageObject);
            }else{
                if(messageObject.type && _this.on.has(messageObject.type)){
                    _this.on.dispatchEvent(messageObject.type, messageObject);
                }else if(_this.onMessage){
                    _this.onMessage(messageObject);
                }else if(_this.on.has("message")){
                    _this.on.dispatchEvent("message", messageObject);
                }
            }
        }
        function defaultOnMessage(messageObject){
            log(
                "Un-handled messageObject, \n"+
                "defaultOnMessage received unhandled message object:\n"+JSON.stringify(messageObject, undefined, "\t")
            );
        }
        function defaultOnTextMessage(message){
            log("Messageing default onTextMessage received unhandled message:\n"+message);
        }
        
        function init(){
            _this.clientId = messageingObject.clientId;
            _this.getMessageObject = getMessageObject;
            _this.send = send;
            _this.send.MessageObject = MessageObject;
            _this.onMessage = defaultOnMessage;
            _this.onTextMessage = defaultOnTextMessage;
            
            _this.blobToArrayBuffer = function(blob, callback){
                var fileReader = new FileReader();
                fileReader.onload = function() {
                    callback(this.result);
                };
                fileReader.readAsArrayBuffer(blob);
            };
            _this.blobToBase64 = function(blob, callback){
                var fileReader = new FileReader();
                
                fileReader.onloadend = function() {
                    callback(fileReader.result);
                };
                fileReader.readAsDataURL(blob); 
            };
            _this.arrayBufferToBase64 = function(arrayBuffer, callback){
                var blob = new Blob([arrayBuffer],{type:'application/octet-binary'});
                _this.blobToBase64(blob, callback);
            };
            _this.base64ToBlob   = function(base64, callback){
                fetch(base64)
                .then(res => res.blob())
                .then(blob => callback(blob));
            };
            _this.base64ToArrayBuffer = function(base64, callback){
                fetch(base64)
                .then(res => res.arrayBuffer())
                .then(arrayBuffer => callback(arrayBuffer));
            };
            
            Events.addEventEmitter(_this);
            sseConnect();
            postUrl = messageingObject.messageingUrl+"/post/"+_this.clientId;
        }
        var
            _this = this,
            postUrl 
        ;
        init();
    }
    return new Messageing();
})();
