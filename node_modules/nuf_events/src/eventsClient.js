var Events = (function(){
    function log(message){
        console.log(
            "------  /lib/event.js  ------\n"+
            message
        );
    }
    function getObjectString(obj, maxDepth){
        function recursive(object, depth, prefixString){
            //console.log("getObjectString recursive-- depth:"+ depth +" maxDepth:"+maxDepth );
            var result = "";
            var type = typeof(object);
            if (object === undefined){
                result += "undefined";
            }else if(object === null){
                result += "null";
            }else if(!object){
                result += ""+object;
            }else if (depth >= maxDepth) {
                result += "("+type+"-too deep)...";
            }else{
                var processed = false;
                for(var i=0; !processed && i<objectProcessed.length; i++){
                    if (object == objectProcessed[i]) {
                        result += "("+type+"-CYCLE)["+objectProcessed[i]+"] ...";
                        processed = true;
                    }
                }
                if (!processed) {
                    //code
                    result += "("+type+")";
                    switch(type){
                        case "function":
                            result += functionToString(object);
                            //result += getNext(object, depth, prefixString );
                            break;
                        case 'object':
                            result += getNext(object, depth, prefixString );
                            break;
                        default:
                            result += object;
                    }
                }
            }
            
            return result;
        }
        
        function getNext(object, depth, prefixString){
            depth++;
            var pString = prefixString + "\t";
            var keys = Object.keys(object);
            var postString =",\n", key, result = "";
            var isFunction = typeof(object)=="function";
            var sep = ".";
            if (!isFunction) {
                sep = "";
                result = "{";
            }
            
            for(var i=0; i<keys.length; i++){
                if (i == keys.length-1) {
                    postString ="\n";
                }
                key = keys[i];
                result += "\n"+pString+sep+key+":"+recursive(object[key],depth,pString);
            }
            if (!isFunction){
                result+="\n"+prefixString+"}";
            }
            return result;
        }
        function functionToString(funct){
	            var result = "" + funct;
	            var index0 = result.indexOf("function ") + 9;
	            var index1 = result.indexOf("{")+1;
	            result = result.substring(index0, index1)+"...}";
            return result;
        }
        
        //console.log("maxDepth before:"+maxDepth);
        maxDepth = maxDepth ||  4;
        //console.log("maxDepth after :"+maxDepth);
        //console.log("-- getObjectString:"+obj);
        // 4 levels deep
        // todo:
        //  handle function atributes like function abc(){}; abc.atribute
        var objectProcessed = [];
        var result = recursive(obj,0,"");
        return result;
    }
    
    function EventEmitter(parentObject){
        function on(name, eventListener){ // add event listener
            if (!eventListeners[name]) {
                eventListeners[name] = [];
            }
            eventListeners[name].push(eventListener);
        }
        function removeEventListener(name, eventListener){
            var result = { name:[] };
            if (eventHandlers[name]) {
                var ehArray = eventHandlers[name];
                if (eventListener) {
                    var
                        i=0,
                        found = false
                    ;
                    for(i=0; i< ehArray.length; i++){
                        if (ehArray[i] == eventListener) {
                            found = true;
                            break;
                        }
                    }
                    if (found) {
                        result.name.push(ehArray[i]);
                        ehArray.splice(i,1);
                    }
                }else{
                    result[name] = ehArray[messageType];
                    delete ehArray[messageType];
                }
            }
            return result;
        }
        function dispatchEvent(type, data){
            var _event;
            if(type.constructor.name == "Event"){
                _event = type;
            }
            var event = _event || new Event(type, data);
            type = event.type;
            
            var
                // call onEventName using on.emitEvent(new Event(eventName, data))
                cappedType = type.substring(0,1).toUpperCase()+type.substring(1),
                i, listeners
            ;
            // call event type if it has a listener 
            // call unmodified type if it exists
            if(!event.stopPropigating &&  parentObject["on"+type] ){
                parentObject["on"+type](event);
            }
            // call modified cappedType if its not the same as the unmodified type
            if( !event.stopPropigating &&  type != cappedType  && parentObject["on"+cappedType] ){
                parentObject["on"+cappedType](event);
            }
            if(!event.stopPropigating && eventListeners[type] ){
                listeners = eventListeners[type];
                for(i=0; i< listeners.length && !event.stopPropigating; i++){
                    listeners[i](event);
                }
            }
            // call event emitted if it has a listener
            type = "eventDispatched";
            if(parentObject["on"+type] ){
                parentObject["on"+type](event);
            }
            if(eventListeners[type] ){
                listeners = eventListeners[type];
                for(i=0; i< listeners.length && !event.stopPropigating; i++){
                    listeners[i](event);
                }
            }
        }
        function dispose(){
            var keys= Object.keys(eventListeners);
            for(i=0; i< keys.length; i++){
                delete eventListeners[keys[i]];
            }
            delete parentObject.on;
        }
        function has(eventName){return !!eventListeners[eventName];};
        function init(){
            eventListeners = {};
            on.eventListeners = eventListeners;
            on.dispatchEvent = dispatchEvent;
            on.dispose = dispose;
            on.removeEventListener = removeEventListener;
			on.has = has;
            parentObject.on = on;
        }
        var
            eventListeners
        ;
        init();
    }
    
    function Event(type, data){
        function toString(){
            var result = getObjectString(_this, 2);
            return result;
        }
        
        function init(){
            // constructor
            _this.type = type;
            _this.data = data;
            _this.toString = toString;
        }
        var
            _this = this
        ;
        init();
    }
    
    Event.addEventEmitter = function (object){
        EventEmitter(object);
    };
    return Event;
})();
